{"ast":null,"code":"// import React, { useState, useEffect, useImperativeHandle } from 'react';\n// import PropTypes from 'prop-types';\n// import { throttle } from 'lodash';\n// const ScrollReveal = React.forwardRef((props, ref) => {\n//   const [viewportHeight, setViewportheight] = useState(window.innerHeight); \n//   const [revealEl, setRevealel] = useState([]);\n//   const checkComplete = () => {\n//     return revealEl.length <= document.querySelectorAll('[class*=reveal-].is-revealed').length;\n//   };\n//   const elementIsVisible = (el, offset) => {\n//     return (el.getBoundingClientRect().top <= viewportHeight - offset);\n//   };\n//   const revealElements = () => {\n//     if (checkComplete()) return;\n//     for (let i = 0; i < revealEl.length; i++) {\n//       let el = revealEl[i];\n//       let revealDelay = el.getAttribute('data-reveal-delay');\n//       let revealOffset = (el.getAttribute('data-reveal-offset') ? el.getAttribute('data-reveal-offset') : '200');\n//       let listenedEl = (el.getAttribute('data-reveal-container') ? el.closest(el.getAttribute('data-reveal-container')) : el);\n//       if (elementIsVisible(listenedEl, revealOffset) && !el.classList.contains('is-revealed')) {\n//         if (revealDelay && revealDelay !== 0) {\n//           setTimeout(function () {\n//             el.classList.add('is-revealed');\n//           }, revealDelay);\n//         } else {\n//           el.classList.add('is-revealed');\n//         }\n//       }\n//     }\n//   };\n//   useImperativeHandle(ref, () => ({\n//     init() {\n//       setRevealel(document.querySelectorAll('[class*=reveal-]'));\n//     }\n//   }));  \n//   useEffect(() => {\n//     if (typeof revealEl !== 'undefined' && revealEl.length > 0) {\n//       if (!checkComplete()) {\n//         window.addEventListener('scroll', handleScroll);\n//         window.addEventListener('resize', handleResize);\n//       }\n//       revealElements();\n//     }\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [revealEl]);\n//   const handleListeners = () => {\n//     if (!checkComplete()) return;\n//     window.removeEventListener('scroll', handleScroll);\n//     window.removeEventListener('resize', handleResize);\n//   };\n//   const handleScroll = throttle(() => {\n//     handleListeners();\n//     revealElements();\n//   }, 30);\n//   const handleResize = throttle(() => {\n//     setViewportheight(window.innerHeight);\n//   }, 30);\n//   useEffect(() => {\n//     handleListeners();\n//     revealElements();\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [viewportHeight]);  \n//   return (\n//     <>\n//       {props.children()}\n//     </>\n//   );\n// });\n// ScrollReveal.propTypes = {\n//   children: PropTypes.func.isRequired\n// };\n// export default ScrollReveal;","map":{"version":3,"sources":["/Users/carlos/Desktop/bootcamp/bootcamp/homework/open-react-template/src/utils/ScrollReveal.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect, useImperativeHandle } from 'react';\n// import PropTypes from 'prop-types';\n// import { throttle } from 'lodash';\n\n// const ScrollReveal = React.forwardRef((props, ref) => {\n\n//   const [viewportHeight, setViewportheight] = useState(window.innerHeight); \n//   const [revealEl, setRevealel] = useState([]);\n\n//   const checkComplete = () => {\n//     return revealEl.length <= document.querySelectorAll('[class*=reveal-].is-revealed').length;\n//   };\n\n//   const elementIsVisible = (el, offset) => {\n//     return (el.getBoundingClientRect().top <= viewportHeight - offset);\n//   };\n\n//   const revealElements = () => {\n//     if (checkComplete()) return;\n//     for (let i = 0; i < revealEl.length; i++) {\n//       let el = revealEl[i];\n//       let revealDelay = el.getAttribute('data-reveal-delay');\n//       let revealOffset = (el.getAttribute('data-reveal-offset') ? el.getAttribute('data-reveal-offset') : '200');\n//       let listenedEl = (el.getAttribute('data-reveal-container') ? el.closest(el.getAttribute('data-reveal-container')) : el);\n//       if (elementIsVisible(listenedEl, revealOffset) && !el.classList.contains('is-revealed')) {\n//         if (revealDelay && revealDelay !== 0) {\n//           setTimeout(function () {\n//             el.classList.add('is-revealed');\n//           }, revealDelay);\n//         } else {\n//           el.classList.add('is-revealed');\n//         }\n//       }\n//     }\n//   };\n\n//   useImperativeHandle(ref, () => ({\n//     init() {\n//       setRevealel(document.querySelectorAll('[class*=reveal-]'));\n//     }\n//   }));  \n\n//   useEffect(() => {\n//     if (typeof revealEl !== 'undefined' && revealEl.length > 0) {\n//       if (!checkComplete()) {\n//         window.addEventListener('scroll', handleScroll);\n//         window.addEventListener('resize', handleResize);\n//       }\n//       revealElements();\n//     }\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [revealEl]);\n\n//   const handleListeners = () => {\n//     if (!checkComplete()) return;\n//     window.removeEventListener('scroll', handleScroll);\n//     window.removeEventListener('resize', handleResize);\n//   };\n\n//   const handleScroll = throttle(() => {\n//     handleListeners();\n//     revealElements();\n//   }, 30);\n\n//   const handleResize = throttle(() => {\n//     setViewportheight(window.innerHeight);\n//   }, 30);\n\n//   useEffect(() => {\n//     handleListeners();\n//     revealElements();\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [viewportHeight]);  \n\n//   return (\n//     <>\n//       {props.children()}\n//     </>\n//   );\n// });\n\n// ScrollReveal.propTypes = {\n//   children: PropTypes.func.isRequired\n// };\n\n// export default ScrollReveal;"]},"metadata":{},"sourceType":"module"}